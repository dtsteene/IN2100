--- Oblig 1 Emma Storberg
--- Jobber sammen med Daniel Steeneveldt

--- Oppgave 9 -----------------------------------------------------------------------

fmod NAT-ADD is
    sort Nat .
    op 0 : -> Nat [ctor] .
    op s : Nat -> Nat [ctor] .
    op _+_ : Nat Nat -> Nat [comm] .

    vars M N : Nat .

    eq 0 + M = M .
    eq s(M) + N = s(M + N) .

endfm

fmod BOOLEAN is
    sort Boolean .
    ops true false : -> Boolean [ctor] .
    op not_ : Boolean -> Boolean [prec 53] .
    op _and_ : Boolean Boolean -> Boolean [prec 55] .
    op _or_ : Boolean Boolean -> Boolean [prec 59] .
    
    var B : Boolean .
    
    eq not false = true . eq not true = false . eq true and B = B . eq true or B = true .

endfm

fmod NAT< is
    protecting NAT-ADD .  protecting BOOLEAN .
    op _<_ : Nat Nat -> Boolean .
    
    vars M N : Nat .
    
    eq 0 < s(M) = true .
    eq M < 0 = false .
    eq s(M) < s(N) = M < N .

endfm

fmod NAT1 is 
    protecting NAT< .
    ops _monus_ diff min : Nat Nat -> Nat .
    ops odd even : Nat -> Boolean .

    vars M N : Nat .

    --- min
    ceq min(M,N) = M if M < N = true .
    ceq min(M,N) = N if N < M = true .
    ceq min(M,N) = M if M < N = false .
    
    --- monus
    eq 0 monus N = 0 .
    eq M monus 0 = M .
    eq s(M) monus s(N) = M monus N .

    --- even
    eq even(0) = true .
    eq even(s(0)) = false .
    eq even(s(s(M))) = even(M) .

    --- odd
    eq odd(M) = not even(M) .

endfm

set protect BOOL off .
set trace off .

red s(s(s(s(s(0))))) monus s(s(0)) .
red s(s(0)) monus s(s(s(0))) .
red s(0) monus s(0) .

red min(s(0), s(0)) .
red min(0, s(s(s(0)))) .
red min(s(s(s(s(0)))), s(s(0))) .

red odd(0) .
red even(0) .
red odd(s(s(s(s(0))))) .      --- 4
red even(s(s(s(s(0))))) .     --- 4
red odd(s(s(s(s(s(0)))))) .   --- 5
red even(s(s(s(s(s(0)))))) .  --- 5


--- Oppgave 10 ---------------------------------------------------------------


fmod LIST-NAT1 is
    protecting NAT1 . protecting BOOLEAN . 
    sort List .
    op nil : -> List [ctor] .
    op __ : List Nat -> List [ctor] .
    
    op concat : List List -> List .     *** Concatenate two lists
    op empty? : List -> Boolean .       *** Is the list empty?
    op rest : List -> List .            *** Remove first element.
    op last : List -> Nat .             *** Last element
    op reverse : List -> List .         *** Reverse list

    vars N : Nat .    vars L L’ : List .

    --- concat
    eq concat(L, nil) = L .
    eq concat(L, L’ N) = concat(L, L’) N .

    --- empty? 
    eq empty?(nil) = true .
    eq empty?(L) = false . 

    --- rest
    eq rest(nil) = nil . --- base case
    eq rest(nil N) = nil . --- base case
    eq rest(L N) = rest(L) N .

    --- last
    eq last (L N) = N .
    eq last (nil) = 0 .

    --- reverse
    eq reverse(nil) = nil . --- base case
    eq reverse(L N) = concat(nil N, reverse(L)) . --- move to the back until base case

endfm

red empty?(nil) .
red rest(nil) .
red last(nil) .
red reverse(nil) .
red empty?(nil s(0)) .
red rest(nil s(0)) .
red last(nil s(0)) .
red reverse(nil s(0)) .
red empty?(nil s(s(s(0))) s(0) s(s(0))) .
red rest(nil s(s(s(0))) s(0) s(s(0))) .
red last(nil s(s(s(0))) s(0) s(s(0))) .
red reverse(nil s(s(s(0))) s(0) s(s(0))) .

--- Oppgave 11 ---------------------------------------------------------------

fmod BINTREE-NAT is
    protecting BOOLEAN .
    protecting NAT1 .
    protecting LIST-NAT1 .

    sort BinTree .
    op empty : -> BinTree [ctor] .
    op bintree : BinTree Nat BinTree -> BinTree [ctor] .
    
    ops inorder postorder : BinTree -> List .
    ops weight : BinTree -> Nat .
    op reverse : BinTree -> BinTree . 

    vars BT BT' : BinTree . vars N : Nat .

    --- inorder (left first, then self, then right)
    eq inorder(empty) = nil .
    eq inorder(bintree(BT, N, BT')) = concat(inorder(BT) N , inorder(BT')) .

    --- postorder (left first, then right, then self)
    eq postorder(empty) = nil .
    eq postorder(bintree(BT, N , BT')) = concat(postorder(BT), postorder(BT') N) .

    --- weight
    eq weight(empty) = 0 .
    eq weight(bintree( BT, N, BT')) = weight(BT) + N + weight(BT') .

    --- reverse
    eq reverse(empty) = empty .
    eq reverse(bintree(BT, N, BT')) = bintree(reverse(BT'), N, reverse(BT)) . 

endfm

red inorder(bintree(empty, s(s(s(s(0)))), 
                    bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
red postorder(bintree(empty, s(s(s(s(0)))), 
              bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
red weight(bintree(empty, s(s(s(s(0)))), 
                   bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
red reverse(bintree(empty, s(s(s(s(0)))), 
                    bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
red inorder(empty) .
red postorder(empty) .
red weight(empty) .
red reverse(empty) .
red inorder(bintree(bintree(empty, s(s(0)), 
                            bintree(empty, s(s(s(0))), empty)), 
            s(s(s(s(0)))), 
            bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), 
                    s(s(s(s(s(s(s(0))))))), 
                   bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
red postorder(bintree(bintree(empty, s(s(0)), 
                            bintree(empty, s(s(s(0))), empty)), 
            s(s(s(s(0)))), 
            bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), 
                    s(s(s(s(s(s(s(0))))))), 
                   bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
red weight(bintree(bintree(empty, s(s(0)), 
                            bintree(empty, s(s(s(0))), empty)), 
            s(s(s(s(0)))), 
            bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), 
                    s(s(s(s(s(s(s(0))))))), 
                   bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
red reverse(bintree(bintree(empty, s(s(0)), 
                            bintree(empty, s(s(s(0))), empty)), 
            s(s(s(s(0)))), 
            bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), 
                    s(s(s(s(s(s(s(0))))))), 
                   bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .