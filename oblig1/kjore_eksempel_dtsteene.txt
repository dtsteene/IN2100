Maude> in ../IN2100/oblig1/oblig1_tests.maude
==========================================

Reading in file: "oppg11_dtsteene.maude"
Reading in file: "oppg10_dtsteene.maude"
==========================================
.
Reading in file: "imports.maude"
==========================================
fmod NAT-ADD
Advisory: redefining module NAT-ADD.
==========================================
fmod BOOLEAN
Advisory: redefining module BOOLEAN.
==========================================
fmod NAT<
Advisory: redefining module NAT<.
Done reading in file: "imports.maude"
==========================================
.
Reading in file: "oppg9_dtsteene.maude"
==========================================
.
Reading in file: "imports.maude"
==========================================
fmod NAT-ADD
Advisory: redefining module NAT-ADD.
==========================================
fmod BOOLEAN
Advisory: redefining module BOOLEAN.
==========================================
fmod NAT<
Advisory: redefining module NAT<.
Done reading in file: "imports.maude"
==========================================
fmod NAT1
Advisory: redefining module NAT1.
Done reading in file: "oppg9_dtsteene.maude"
==========================================
fmod LIST-NAT1
Advisory: redefining module LIST-NAT1.
Done reading in file: "oppg10_dtsteene.maude"
==========================================
fmod BINTREE-NAT
Advisory: redefining module BINTREE-NAT.
Warning: "oppg11_dtsteene.maude", line 32 (fmod BINTREE-NAT): multiple distinct parses for statement
eq weight(bintree(BT, N, BT')) = weight(BT) + N + weight(BT') .
Done reading in file: "oppg11_dtsteene.maude"
==========================================
reduce in BINTREE-NAT : s(s(s(s(s(0))))) monus s(s(0)) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(s(s(0)))
==========================================
reduce in BINTREE-NAT : s(s(0)) monus s(s(s(0))) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: 0
==========================================
reduce in BINTREE-NAT : s(0) monus s(0) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: 0
==========================================
reduce in BINTREE-NAT : min(s(0), s(0)) .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(0)
==========================================
reduce in BINTREE-NAT : min(0, s(s(s(0)))) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: 0
==========================================
reduce in BINTREE-NAT : min(s(s(s(s(0)))), s(s(0))) .
rewrites: 7 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(s(0))
==========================================
reduce in BINTREE-NAT : odd(0) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: false
==========================================
reduce in BINTREE-NAT : even(0) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: true
==========================================
reduce in BINTREE-NAT : odd(s(s(s(s(0))))) .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: false
==========================================
reduce in BINTREE-NAT : even(s(s(s(s(0))))) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: true
==========================================
reduce in BINTREE-NAT : odd(s(s(s(s(s(0)))))) .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: true
==========================================
reduce in BINTREE-NAT : even(s(s(s(s(s(0)))))) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: false
==========================================
reduce in BINTREE-NAT : empty?(nil) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: true
==========================================
reduce in BINTREE-NAT : rest(nil) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil
==========================================
reduce in BINTREE-NAT : last(nil) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: 0
==========================================
reduce in BINTREE-NAT : reverse(nil) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil
==========================================
reduce in BINTREE-NAT : empty?(nil s(0)) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: false
==========================================
reduce in BINTREE-NAT : rest(nil s(0)) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil
==========================================
reduce in BINTREE-NAT : last(nil s(0)) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(0)
==========================================
reduce in BINTREE-NAT : reverse(nil s(0)) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(0)
==========================================
reduce in BINTREE-NAT : empty?(nil s(s(s(0))) s(0) s(s(0))) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Boolean: false
==========================================
reduce in BINTREE-NAT : rest(nil s(s(s(0))) s(0) s(s(0))) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(0) s(s(0))
==========================================
reduce in BINTREE-NAT : last(nil s(s(s(0))) s(0) s(s(0))) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(s(0))
==========================================
reduce in BINTREE-NAT : reverse(nil s(s(s(0))) s(0) s(s(0))) .
rewrites: 10 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(s(0)) s(0) s(s(s(0)))
==========================================
reduce in BINTREE-NAT : inorder(bintree(empty, s(s(s(s(0)))), bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
rewrites: 8 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(s(s(s(0)))) s(s(s(s(s(s(s(0)))))))
==========================================
reduce in BINTREE-NAT : postorder(bintree(empty, s(s(s(s(0)))), bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
rewrites: 10 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(s(s(s(s(s(s(0))))))) s(s(s(s(0))))
==========================================
reduce in BINTREE-NAT : weight(bintree(empty, s(s(s(s(0)))), bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
rewrites: 20 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(s(s(s(s(s(s(s(s(s(s(0)))))))))))
==========================================
reduce in BINTREE-NAT : reverse(bintree(empty, s(s(s(s(0)))), bintree(empty, s(s(s(s(s(s(s(0))))))), empty))) .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result BinTree: bintree(bintree(empty, s(s(s(s(s(s(s(0))))))), empty), s(s(s(s(0)))), empty)
==========================================
reduce in BINTREE-NAT : inorder(empty) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil
==========================================
reduce in BINTREE-NAT : postorder(empty) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil
==========================================
reduce in BINTREE-NAT : weight(empty) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: 0
==========================================
reduce in BINTREE-NAT : reverse(empty) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result BinTree: empty
==========================================
reduce in BINTREE-NAT : inorder(bintree(bintree(empty, s(s(0)), bintree(empty, s(s(s(0))), empty)), s(s(s(s(0)))), bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), s(s(
    s(s(s(s(s(0))))))), bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
rewrites: 24 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(s(0)) s(s(s(0))) s(s(s(s(0)))) s(s(s(s(s(s(0)))))) s(s(s(s(s(s(s(0))))))) s(s(s(s(s(s(s(s(s(0)))))))))
==========================================
reduce in BINTREE-NAT : postorder(bintree(bintree(empty, s(s(0)), bintree(empty, s(s(s(0))), empty)), s(s(s(s(0)))), bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), s(
    s(s(s(s(s(s(0))))))), bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
rewrites: 30 in 0ms cpu (0ms real) (~ rewrites/second)
result List: nil s(s(s(0))) s(s(0)) s(s(s(s(s(s(0)))))) s(s(s(s(s(s(s(s(s(0))))))))) s(s(s(s(s(s(s(0))))))) s(s(s(s(0))))
==========================================
reduce in BINTREE-NAT : weight(bintree(bintree(empty, s(s(0)), bintree(empty, s(s(s(0))), empty)), s(s(s(s(0)))), bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), s(s(
    s(s(s(s(s(0))))))), bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
rewrites: 78 in 0ms cpu (0ms real) (~ rewrites/second)
result Nat: s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(0)))))))))))))))))))))))))))))))
==========================================
reduce in BINTREE-NAT : reverse(bintree(bintree(empty, s(s(0)), bintree(empty, s(s(s(0))), empty)), s(s(s(s(0)))), bintree(bintree(empty, s(s(s(s(s(s(0)))))), empty), s(s(
    s(s(s(s(s(0))))))), bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty)))) .
rewrites: 13 in 0ms cpu (0ms real) (~ rewrites/second)
result BinTree: bintree(bintree(bintree(empty, s(s(s(s(s(s(s(s(s(0))))))))), empty), s(s(s(s(s(s(s(0))))))), bintree(empty, s(s(s(s(s(s(0)))))), empty)), s(s(s(s(0)))),
    bintree(bintree(empty, s(s(s(0))), empty), s(s(0)), empty))